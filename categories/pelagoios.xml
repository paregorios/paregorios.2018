<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>paregorios.org (Posts about pelagoios)</title><link>https://paregorios.org/</link><description></description><atom:link href="https://paregorios.org/categories/pelagoios.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:ipse@paregorios.org"&gt;Tom Elliott&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;&lt;img
alt="Creative Commons License" style="border-width:0"
src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;&lt;/a&gt;
&lt;span xmlns:dct="http://purl.org/dc/terms/"
property="dct:title"&gt;&lt;strong&gt;&lt;em&gt;paregorios.org&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt; by
&lt;a xmlns:cc="http://creativecommons.org/ns#" href="https://paregorios.org/me"
property="cc:attributionName" rel="cc:attributionURL"&gt;Tom Elliott&lt;/a&gt; is
licensed under a &lt;a rel="license"
href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons
Attribution 4.0 International License&lt;/a&gt;.
</copyright><lastBuildDate>Sun, 06 May 2018 12:25:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using OpenRefine with Pleiades</title><link>https://paregorios.org/posts/2017/10/using-openrefine-with-pleiades/</link><dc:creator>Tom Elliott</dc:creator><description>&lt;p&gt;This past summer, &lt;a href="https://blogs.library.duke.edu/dcthree/"&gt;DC3&lt;/a&gt;'s &lt;a href="https://ryanfb.github.io/"&gt;Ryan Baumann&lt;/a&gt; developed a reconciliation service for &lt;i&gt;&lt;a href="https://pleiades.stoa.org/"&gt;Pleiades&lt;/a&gt;&lt;/i&gt;. He's named it &lt;i&gt;&lt;a href="http://geocollider-sinatra.herokuapp.com/"&gt;Geocollider&lt;/a&gt;&lt;/i&gt;. It has two manifestations:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Upload &lt;a href="https://www.loc.gov/preservation/digital/formats/fdd/fdd000323.shtml"&gt;a CSV file&lt;/a&gt; containing placenames and/or longitude/latitude coordinates, set matching parameters, and get back a CSV file of possible matches.&lt;/li&gt;&lt;li&gt;An online Application Programming Interface (API) compatible with the &lt;i&gt;&lt;a href="http://openrefine.org/"&gt;OpenRefine&lt;/a&gt;&lt;/i&gt; data-cleaning tool.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The first version is relatively self-documenting. This blog post is about using the second version with &lt;i&gt;OpenRefine&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;!-- TEASER_END --&gt;&lt;h3&gt;Reconciliation&lt;/h3&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I.e., matching (collating, aligning) your placenames against places in &lt;i&gt;Pleiades&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Running &lt;i&gt;OpenRefine&lt;/i&gt; against &lt;i&gt;Geocollider&lt;/i&gt; for reconciliation purposes is as easy as:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://openrefine.org/download.html"&gt;Download and install &lt;i&gt;OpenRefine&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Follow &lt;a href="https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation"&gt;the standard OpenRefine instructions for "Reconciliation,"&lt;/a&gt; but instead of picking the pre-installed "Wikidata Reconciliation Service," select the "Add standard service..." button and enter "http://geocollider-sinatra.herokuapp.com/reconcile" in the service URL dialog, then select the "Add Service" button.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;When you've worked through the results of your reconciliation process and selected matches, &lt;i&gt;OpenRefine&lt;/i&gt; will have added the corresponding &lt;a href="https://pleiades.stoa.org/help/what-are-pleiades-uris"&gt;&lt;i&gt;Pleiades&lt;/i&gt; place URIs&lt;/a&gt; to your dataset. That may be all you want or need (for example, if you're preparing to bring your own dataset into &lt;a href="http://commons.pelagios.org/"&gt;the &lt;i&gt;Pelagios&lt;/i&gt; network&lt;/a&gt;) ... just export the results and go on with your work. &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But if you'd like to actually get information &lt;b&gt;about&lt;/b&gt; the &lt;i&gt;Pleiades&lt;/i&gt; places, proceed to the next section.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h3&gt;Augmentation&lt;/h3&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I.e., pulling data from &lt;i&gt;Pleiades&lt;/i&gt; into &lt;i&gt;OpenRefine&lt;/i&gt; and selectively parsing it for information to add to your dataset.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Pleiades&lt;/i&gt; provides an API for retrieving information about each place resource it contains. One of the data formats this API provides is &lt;a href="https://www.loc.gov/preservation/digital/formats/fdd/fdd000381.shtml"&gt;JSON&lt;/a&gt;, which is a format with which &lt;i&gt;OpenRefine&lt;/i&gt; is designed to work. The following recipe demonstrates how to use the &lt;a href="https://github.com/OpenRefine/OpenRefine/wiki/General-Refine-Expression-Language"&gt;General Refine Expression Language&lt;/a&gt; to extract the "Representative Location" associated with each &lt;i&gt;Pleiades&lt;/i&gt; place. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;b&gt;Caveat:&lt;/b&gt;&lt;/span&gt; this recipe will not, at present, work with the current Mac OSX release of &lt;i&gt;OpenRefine&lt;/i&gt; (2.7), even though it should and hopefully eventually will.  It has not been tested with the current releases for Windows and Linux, but they probably suffer from the same limitations as the OSX release. More information, including a non-trivial technical workaround, may be had from &lt;a href="https://github.com/OpenRefine/OpenRefine/issues/1265"&gt;OpenRefine Issue 1265&lt;/a&gt;. I will update this blog post if and when a resolution is forthcoming.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;b&gt;1. Create a new column containing &lt;i&gt;Pleiades&lt;/i&gt; JSON. &lt;/b&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Assuming your dataset is open in an &lt;i&gt;OpenRefine&lt;/i&gt; project and that it contains a column that has been reconciled using &lt;i&gt;Geocollider&lt;/i&gt;, select the drop-down menu on that column and choose "Edit column" -&amp;gt; "Add column by fetching URLs ..."&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-p7Op-SfHjOk/WeEyP9BNS_I/AAAAAAAAAvY/B7ndDjX2fuEEgS6H6c32Eu6tIRYfCUbDQCLcBGAs/s1600/foo1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine column drop-down menu: add column by fetching URLs" border="0" data-original-height="378" data-original-width="409" height="369" src="https://4.bp.blogspot.com/-p7Op-SfHjOk/WeEyP9BNS_I/AAAAAAAAAvY/B7ndDjX2fuEEgS6H6c32Eu6tIRYfCUbDQCLcBGAs/s400/foo1.png" title="" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the dialog box, provide a name for the new column you are about to create. In the "expression" box, enter a GREL expression that retrieves the &lt;i&gt;Pleiades&lt;/i&gt; URL from the reconciliation match on each cell and appends the string "/json" to it:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;cell.recon.match.id + "/json"&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote class="tr_bq" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-vi2Jk_4TNqM/WeEyaD1MlTI/AAAAAAAAAvc/s1Zqp-crhog1b9yY2nN5h39DXgMM--zSgCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.18.59%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine dialog box: add column by fetching URLs" border="0" data-original-height="548" data-original-width="720" height="304" src="https://1.bp.blogspot.com/-vi2Jk_4TNqM/WeEyaD1MlTI/AAAAAAAAAvc/s1Zqp-crhog1b9yY2nN5h39DXgMM--zSgCLcBGAs/s400/Screen%2BShot%2B2017-10-13%2Bat%2B4.18.59%2BPM.png" title="" width="400"&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;&lt;i&gt;OpenRefine&lt;/i&gt; retrieves the JSON for each matched place from &lt;i&gt;Pleiades&lt;/i&gt; and inserts it into the appropriate cell in the new column. &lt;/div&gt;&lt;br&gt;&lt;b&gt;2. Create another new column by parsing the representative longitude out of the JSON.&lt;/b&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;From the drop-down menu on the column containing JSON, select "Edit column" -&amp;gt; "Add column based on this column..."&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-6Pp_ZLZop7E/WeEygxbwkSI/AAAAAAAAAvg/BhRqIf9VzLIuem68F86jLgQP7yfV40miwCLcBGAs/s1600/foo2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine column drop-down menu: add column based on this column" border="0" data-original-height="387" data-original-width="655" src="https://3.bp.blogspot.com/-6Pp_ZLZop7E/WeEygxbwkSI/AAAAAAAAAvg/BhRqIf9VzLIuem68F86jLgQP7yfV40miwCLcBGAs/s1600/foo2.png" title=""&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the dialog box, provide a name for the new column. In the expression box, enter a GREL expression that extracts the longitude from the &lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;reprPoint&lt;/span&gt; object in the JSON:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;value.parseJson()['reprPoint'][0]&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-eRYBqNDMXxg/WeEyrMvN9XI/AAAAAAAAAvk/nCkcYKP6zI0oMoeGI0Ek6_eoip4AbyHKwCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.13%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine column dialog box: add column based on this column" border="0" data-original-height="519" data-original-width="718" height="289" src="https://3.bp.blogspot.com/-eRYBqNDMXxg/WeEyrMvN9XI/AAAAAAAAAvk/nCkcYKP6zI0oMoeGI0Ek6_eoip4AbyHKwCLcBGAs/s400/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.13%2BPM.png" title="" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note that the &lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;reprPoint&lt;/span&gt; object contains a two-element list, like:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;&lt;span style="white-space: pre-wrap;"&gt;[ &lt;/span&gt;&lt;span style="white-space: pre-wrap;"&gt;37.328382, &lt;/span&gt;&lt;span style="white-space: pre-wrap;"&gt;38.240638 ]&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;i&gt;Pleiades&lt;/i&gt; follows &lt;a href="https://tools.ietf.org/html/rfc7946"&gt;the GeoJSON specification&lt;/a&gt; in using the longitude, latitude ordering of elements in coordinate pairs so, to get the longitude, you use the index (0) for the first element in the list.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;b&gt;3. Create a column for the latitude&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;Use the method explained in step 2, but select the second list item from &lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;reprPoint&lt;/span&gt; (index=1). &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;b&gt;4. Carry on ...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;Your data set in &lt;i&gt;OpenRefine&lt;/i&gt; will now look something like this:  &lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-O9NL6Rj0tT8/WeEywg8gBlI/AAAAAAAAAvs/vQ-aYkgXapg3lyzFWqayLL9Ka5OgW00CgCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.58%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="screen capture showing portion of an OpenRefine table that includes an ancient toponym, JSON retrieved from Pleiades, and latitude and longitude values extracted from that JSON" border="0" data-original-height="237" data-original-width="1082" src="https://1.bp.blogspot.com/-O9NL6Rj0tT8/WeEywg8gBlI/AAAAAAAAAvs/vQ-aYkgXapg3lyzFWqayLL9Ka5OgW00CgCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.58%2BPM.png" title=""&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;</description><category>csv</category><category>horothesia</category><category>interop</category><category>json</category><category>patterns</category><category>pelagoios</category><category>pleiades</category><category>refine</category><guid>https://paregorios.org/posts/2017/10/using-openrefine-with-pleiades/</guid><pubDate>Sat, 14 Oct 2017 03:49:00 GMT</pubDate></item><item><title>It's all coming together at PELAGIOS</title><link>https://paregorios.org/posts/2011/11/its-all-coming-together-at-pelagios/</link><dc:creator>Tom Elliott</dc:creator><description>&lt;p&gt;For years (over a decade in fact) we've been dreaming and talking about linking up ancient world resources on the web along the thematic axis of geography. &lt;a href="http://pleiades.stoa.org/"&gt;Pleiades&lt;/a&gt; was launched in no small part in pursuit of that vision. And today comes more proof -- to which many can relate -- that hard work, collaboration, and openness bears really tasty fruit.&lt;br&gt;&lt;/p&gt;&lt;blockquote class="tr_bq"&gt;The &lt;a href="http://www.perseus.tufts.edu/"&gt;Perseus&lt;/a&gt; geospatial data now includes annotations of ancient places with Pleiades URIs. Beginning next week, the Places widget in the Perseus interface will include links to download the Pleiades annotations in &lt;a href="http://www.openannotation.org/"&gt;OAC&lt;/a&gt; compliant RDF format. These links will appear for any text with place entity markup which also has places from this dataset. We are also providing a link to search on the top five most frequently mentioned of these places in the &lt;a href="http://pelagios.dme.ait.ac.at/graph-explorer"&gt;Pelagios graph explorer&lt;/a&gt;.&lt;/blockquote&gt;(&lt;a href="http://pelagios-project.blogspot.com/2011/11/perseus-and-pelagios.html"&gt;Check out the rest of the story&lt;/a&gt;, which provides a screenshot of the interface changes and a step-by-step description of how the work was done).&lt;br&gt;&lt;br&gt;How did this come to be possible? Here's a very much abridged history:&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Perseus built a path-breaking, web-based digital library of resources for the study of the ancient world; released a bunch of their code and content under open licenses; and managed the geographic aspects of the content as data&lt;/li&gt;&lt;li&gt;Pleiades built on and marshaled the efforts of the &lt;a href="http://www.unc.edu/depts/cl_atlas/"&gt;Classical Atlas Project&lt;/a&gt;, the &lt;a href="http://darmc.harvard.edu/"&gt;Digital Atlas of Roman and Medieval Civilization&lt;/a&gt;, and other collaborators to publish an ever-improving geographic dataset on the web under a permissive open license&lt;/li&gt;&lt;li&gt;Leif Isaksen, on behalf of the &lt;a href="http://googleancientplaces.wordpress.com/"&gt;Google Ancient Places&lt;/a&gt; project, took that dataset, mashed it up with another open geographical dataset (&lt;a href="http://www.geonames.org/"&gt;GeoNames&lt;/a&gt;) and published the results (&lt;a href="http://googleancientplaces.wordpress.com/pleiades/"&gt;Pleiades+&lt;/a&gt;) under a public domain declaration (more openness).&lt;/li&gt;&lt;li&gt;The &lt;a href="http://pelagios-project.blogspot.com/"&gt;PELAGIOS&lt;/a&gt; team took Pleiades+ and started matching it with their data. Perseus is just the latest member of that team to do so, and there are more on the way.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The resulting interface enhancements Perseus is announcing today are just the latest visible example of how the web of people benefits from the creation and exploitation of the web of data, and it's all super-charged by openness.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm grateful to the hard-working folks, and the array of funding agencies and host institutions, whose commitment and support are making these dreams come true.&lt;/div&gt;</description><category>awmc</category><category>batlas</category><category>collaboration</category><category>horothesia</category><category>interop</category><category>pelagoios</category><category>perseus</category><category>pleiades</category><guid>https://paregorios.org/posts/2011/11/its-all-coming-together-at-pelagios/</guid><pubDate>Sat, 05 Nov 2011 01:07:00 GMT</pubDate></item></channel></rss>