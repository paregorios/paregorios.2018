<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>paregorios.org (Posts about csv)</title><link>https://paregorios.org/</link><description></description><atom:link href="https://paregorios.org/categories/csv.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:paregorios@hotmail.com"&gt;Tom Elliott&lt;/a&gt; </copyright><lastBuildDate>Mon, 09 Apr 2018 16:22:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Preserving Accented and Non-Roman Characters in CSV Workflows</title><link>https://paregorios.org/posts/2018/02/preserving-accented-and-non-roman/</link><dc:creator>Tom Elliott</dc:creator><description>&lt;p&gt;Digital work in and around the Humanities often involves moving data from one system or format to another. That data often involves complex textual materials in multiple languages and writing systems. One commonly used format is the "&lt;a href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;Comma-Separated Values&lt;/a&gt;" text file. It's not uncommon to find that characters not used in English get garbled when exported from a spreadsheet program like Microsoft Excel to CSV (or imported from CSV into such a program). What's going on and how do you make it stop?&lt;br&gt;&lt;/p&gt;&lt;h3&gt;Why&lt;/h3&gt;CSV began life in an era before &lt;a href="http://unicode.org/standard/WhatIsUnicode.html"&gt;Unicode&lt;/a&gt; and, because of that background, some software assumes that CSV should be encoding using &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;the ASCII text encoding scheme&lt;/a&gt; (some older versions of Excel). Some software defaults to using ASCII, but you can override it manually (more recent versions of Excel). Some software tries to guess what encoding to use when reading or writing a given CSV file, but how it guesses may not be foolproof. Some software writes a special code called a &lt;a href="https://en.wikipedia.org/wiki/Byte_order_mark"&gt;Byte-Order Mark (BOM)&lt;/a&gt; into the beginning of any CSV file that uses a Unicode-aware encoding (Excel for Mac 2016). Some software doesn't expect a BOM and will fail to read the data correctly even if the encoding (e.g., &lt;a href="https://en.wikipedia.org/wiki/UTF-8"&gt;UTF-8&lt;/a&gt;) is otherwise supported.&lt;br&gt;&lt;h3&gt;How to make it stop&lt;/h3&gt;The best way to make it stop is to:&lt;br&gt;&lt;ol&gt;&lt;li&gt;Make sure that any CSV file you import or export is encoded in UTF-8 without a Byte-Order Mark.&lt;/li&gt;&lt;li&gt;Make sure that any software you're using is capable of reading and writing CSV files in UTF-8 without BOM and has been told to do so.&lt;/li&gt;&lt;/ol&gt;Failing that (i.e., you got the CSV file from someone else), you need to find out what encoding it uses and configure your software to read it properly. But note that if the creator of the CSV file allowed it to be written in ASCII, it can't be repaired. You'll have to get them to re-export properly, or to send you the original file so you can open it in appropriate software and save it more deliberately.</description><category>csv</category><category>data</category><category>dh</category><category>horothesia</category><guid>https://paregorios.org/posts/2018/02/preserving-accented-and-non-roman/</guid><pubDate>Sat, 03 Feb 2018 05:33:00 GMT</pubDate></item><item><title>Using OpenRefine with Pleiades</title><link>https://paregorios.org/posts/2017/10/using-openrefine-with-pleiades/</link><dc:creator>Tom Elliott</dc:creator><description>&lt;p&gt;This past summer, &lt;a href="https://blogs.library.duke.edu/dcthree/"&gt;DC3&lt;/a&gt;'s &lt;a href="https://ryanfb.github.io/"&gt;Ryan Baumann&lt;/a&gt; developed a reconciliation service for &lt;i&gt;&lt;a href="https://pleiades.stoa.org/"&gt;Pleiades&lt;/a&gt;&lt;/i&gt;. He's named it &lt;i&gt;&lt;a href="http://geocollider-sinatra.herokuapp.com/"&gt;Geocollider&lt;/a&gt;&lt;/i&gt;. It has two manifestations:&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Upload &lt;a href="https://www.loc.gov/preservation/digital/formats/fdd/fdd000323.shtml"&gt;a CSV file&lt;/a&gt; containing placenames and/or longitude/latitude coordinates, set matching parameters, and get back a CSV file of possible matches.&lt;/li&gt;&lt;li&gt;An online Application Programming Interface (API) compatible with the &lt;i&gt;&lt;a href="http://openrefine.org/"&gt;OpenRefine&lt;/a&gt;&lt;/i&gt; data-cleaning tool.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The first version is relatively self-documenting. This blog post is about using the second version with &lt;i&gt;OpenRefine&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h3&gt;Reconciliation&lt;/h3&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I.e., matching (collating, aligning) your placenames against places in &lt;i&gt;Pleiades&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Running &lt;i&gt;OpenRefine&lt;/i&gt; against &lt;i&gt;Geocollider&lt;/i&gt; for reconciliation purposes is as easy as:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://openrefine.org/download.html"&gt;Download and install &lt;i&gt;OpenRefine&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Follow &lt;a href="https://github.com/OpenRefine/OpenRefine/wiki/Reconciliation"&gt;the standard OpenRefine instructions for "Reconciliation,"&lt;/a&gt; but instead of picking the pre-installed "Wikidata Reconciliation Service," select the "Add standard service..." button and enter "http://geocollider-sinatra.herokuapp.com/reconcile" in the service URL dialog, then select the "Add Service" button.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;When you've worked through the results of your reconciliation process and selected matches, &lt;i&gt;OpenRefine&lt;/i&gt; will have added the corresponding &lt;a href="https://pleiades.stoa.org/help/what-are-pleiades-uris"&gt;&lt;i&gt;Pleiades&lt;/i&gt; place URIs&lt;/a&gt; to your dataset. That may be all you want or need (for example, if you're preparing to bring your own dataset into &lt;a href="http://commons.pelagios.org/"&gt;the &lt;i&gt;Pelagios&lt;/i&gt; network&lt;/a&gt;) ... just export the results and go on with your work. &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But if you'd like to actually get information &lt;b&gt;about&lt;/b&gt; the &lt;i&gt;Pleiades&lt;/i&gt; places, proceed to the next section.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;h3&gt;Augmentation&lt;/h3&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I.e., pulling data from &lt;i&gt;Pleiades&lt;/i&gt; into &lt;i&gt;OpenRefine&lt;/i&gt; and selectively parsing it for information to add to your dataset.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Pleiades&lt;/i&gt; provides an API for retrieving information about each place resource it contains. One of the data formats this API provides is &lt;a href="https://www.loc.gov/preservation/digital/formats/fdd/fdd000381.shtml"&gt;JSON&lt;/a&gt;, which is a format with which &lt;i&gt;OpenRefine&lt;/i&gt; is designed to work. The following recipe demonstrates how to use the &lt;a href="https://github.com/OpenRefine/OpenRefine/wiki/General-Refine-Expression-Language"&gt;General Refine Expression Language&lt;/a&gt; to extract the "Representative Location" associated with each &lt;i&gt;Pleiades&lt;/i&gt; place. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: red;"&gt;&lt;b&gt;Caveat:&lt;/b&gt;&lt;/span&gt; this recipe will not, at present, work with the current Mac OSX release of &lt;i&gt;OpenRefine&lt;/i&gt; (2.7), even though it should and hopefully eventually will.  It has not been tested with the current releases for Windows and Linux, but they probably suffer from the same limitations as the OSX release. More information, including a non-trivial technical workaround, may be had from &lt;a href="https://github.com/OpenRefine/OpenRefine/issues/1265"&gt;OpenRefine Issue 1265&lt;/a&gt;. I will update this blog post if and when a resolution is forthcoming.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;b&gt;1. Create a new column containing &lt;i&gt;Pleiades&lt;/i&gt; JSON. &lt;/b&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Assuming your dataset is open in an &lt;i&gt;OpenRefine&lt;/i&gt; project and that it contains a column that has been reconciled using &lt;i&gt;Geocollider&lt;/i&gt;, select the drop-down menu on that column and choose "Edit column" -&amp;gt; "Add column by fetching URLs ..."&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-p7Op-SfHjOk/WeEyP9BNS_I/AAAAAAAAAvY/B7ndDjX2fuEEgS6H6c32Eu6tIRYfCUbDQCLcBGAs/s1600/foo1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine column drop-down menu: add column by fetching URLs" border="0" data-original-height="378" data-original-width="409" height="369" src="https://4.bp.blogspot.com/-p7Op-SfHjOk/WeEyP9BNS_I/AAAAAAAAAvY/B7ndDjX2fuEEgS6H6c32Eu6tIRYfCUbDQCLcBGAs/s400/foo1.png" title="" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the dialog box, provide a name for the new column you are about to create. In the "expression" box, enter a GREL expression that retrieves the &lt;i&gt;Pleiades&lt;/i&gt; URL from the reconciliation match on each cell and appends the string "/json" to it:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;cell.recon.match.id + "/json"&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote class="tr_bq" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-vi2Jk_4TNqM/WeEyaD1MlTI/AAAAAAAAAvc/s1Zqp-crhog1b9yY2nN5h39DXgMM--zSgCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.18.59%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine dialog box: add column by fetching URLs" border="0" data-original-height="548" data-original-width="720" height="304" src="https://1.bp.blogspot.com/-vi2Jk_4TNqM/WeEyaD1MlTI/AAAAAAAAAvc/s1Zqp-crhog1b9yY2nN5h39DXgMM--zSgCLcBGAs/s400/Screen%2BShot%2B2017-10-13%2Bat%2B4.18.59%2BPM.png" title="" width="400"&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;&lt;i&gt;OpenRefine&lt;/i&gt; retrieves the JSON for each matched place from &lt;i&gt;Pleiades&lt;/i&gt; and inserts it into the appropriate cell in the new column. &lt;/div&gt;&lt;br&gt;&lt;b&gt;2. Create another new column by parsing the representative longitude out of the JSON.&lt;/b&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;From the drop-down menu on the column containing JSON, select "Edit column" -&amp;gt; "Add column based on this column..."&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-6Pp_ZLZop7E/WeEygxbwkSI/AAAAAAAAAvg/BhRqIf9VzLIuem68F86jLgQP7yfV40miwCLcBGAs/s1600/foo2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine column drop-down menu: add column based on this column" border="0" data-original-height="387" data-original-width="655" src="https://3.bp.blogspot.com/-6Pp_ZLZop7E/WeEygxbwkSI/AAAAAAAAAvg/BhRqIf9VzLIuem68F86jLgQP7yfV40miwCLcBGAs/s1600/foo2.png" title=""&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the dialog box, provide a name for the new column. In the expression box, enter a GREL expression that extracts the longitude from the &lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;reprPoint&lt;/span&gt; object in the JSON:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;value.parseJson()['reprPoint'][0]&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-eRYBqNDMXxg/WeEyrMvN9XI/AAAAAAAAAvk/nCkcYKP6zI0oMoeGI0Ek6_eoip4AbyHKwCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.13%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Screen capture of OpenRefine column dialog box: add column based on this column" border="0" data-original-height="519" data-original-width="718" height="289" src="https://3.bp.blogspot.com/-eRYBqNDMXxg/WeEyrMvN9XI/AAAAAAAAAvk/nCkcYKP6zI0oMoeGI0Ek6_eoip4AbyHKwCLcBGAs/s400/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.13%2BPM.png" title="" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note that the &lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;reprPoint&lt;/span&gt; object contains a two-element list, like:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;&lt;span style="white-space: pre-wrap;"&gt;[ &lt;/span&gt;&lt;span style="white-space: pre-wrap;"&gt;37.328382, &lt;/span&gt;&lt;span style="white-space: pre-wrap;"&gt;38.240638 ]&lt;/span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;i&gt;Pleiades&lt;/i&gt; follows &lt;a href="https://tools.ietf.org/html/rfc7946"&gt;the GeoJSON specification&lt;/a&gt; in using the longitude, latitude ordering of elements in coordinate pairs so, to get the longitude, you use the index (0) for the first element in the list.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;b&gt;3. Create a column for the latitude&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;Use the method explained in step 2, but select the second list item from &lt;span style='font-family: "courier new" , "courier" , monospace;'&gt;reprPoint&lt;/span&gt; (index=1). &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;b&gt;4. Carry on ...&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;Your data set in &lt;i&gt;OpenRefine&lt;/i&gt; will now look something like this:  &lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-O9NL6Rj0tT8/WeEywg8gBlI/AAAAAAAAAvs/vQ-aYkgXapg3lyzFWqayLL9Ka5OgW00CgCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.58%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="screen capture showing portion of an OpenRefine table that includes an ancient toponym, JSON retrieved from Pleiades, and latitude and longitude values extracted from that JSON" border="0" data-original-height="237" data-original-width="1082" src="https://1.bp.blogspot.com/-O9NL6Rj0tT8/WeEywg8gBlI/AAAAAAAAAvs/vQ-aYkgXapg3lyzFWqayLL9Ka5OgW00CgCLcBGAs/s1600/Screen%2BShot%2B2017-10-13%2Bat%2B4.30.58%2BPM.png" title=""&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="white-space: pre-wrap;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;</description><category>csv</category><category>horothesia</category><category>interop</category><category>json</category><category>patterns</category><category>pelagoios</category><category>pleiades</category><category>refine</category><guid>https://paregorios.org/posts/2017/10/using-openrefine-with-pleiades/</guid><pubDate>Sat, 14 Oct 2017 03:49:00 GMT</pubDate></item></channel></rss>